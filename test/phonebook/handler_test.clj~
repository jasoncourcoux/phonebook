(ns phonebook.handler-test
  (:require [clojure.test :refer :all]
            [clojure.edn :as edn]
            [ring.mock.request :as mock]
            [phonebook.handler :refer :all]
            [midje.sweet :refer :all]))

(import java.util.UUID)

(def phonebook {:db { "80a8ea00-6072-11e5-960a-d35f77d80ceb"
                               {:first-name "Thomas"
                                :surname "van der Veen"
                                :phonenumber "07833177636"
                                :adress {:street "Hut Farm Place"
                                         :postcode "SO53 3LQ"}}
                      "38d77ce0-6073-11e5-960a-d35f77d80ceb"
                               {:firstname "Paul"
                                :surname "Marris"
                                :phonenumber "07123456"}}
                             :last-added "38d77ce0-6073-11e5-960a-d35f77d80ceb"})


(facts "GET test"
  (with-state-changes [(before :facts (do (reset! phonebook-db phonebook)))]
    (fact "Test getting all entries"
      (let [response (app (mock/request :get "/v1/phonebook"))]
        (:status response) => 200
        (edn/read-string (:body response)) =>  (:db phonebook)))


))



(facts "POST tests"
(with-state-changes [(before :contents (do (reset! phonebook-db {:db {}
                                                                 :last-added "38d77ce0-6073-11e5-960a-d35f77d80ceb"})))]
       (fact "Adding one entry"
       (let [response (app (mock/request :post "/v1/phonebook" (pr-str {:firstname "Fred" :surname "lastName"})))
             body (edn/read-string  (:body response))]
         ;(println response)
         (:status response) => 201
         
         (let [uudi (:body response)
               response (app (mock/request :get (str "v1/phonebook/" uuid)))]
         (:status response) => 200
          (:body response)  => pr-str { uuid {:firstname "Fred" :surname "lastName"}})) 
         ;; 

         ))
    

       ))





(facts "DELETE tests"
  (with-state-changes [(before :contents (do (reset! phonebook-db phonebook)))]
    (fact "removing valid entry")
      (let [response (app (mock/request :delete "/v1/phonebook/80a8ea00-6072-11e5-960a-d35f77d80ceb" ))]
      (:status response) => 200
      (:body response) => "")
    (fact "check result"
      (let [response (app (mock/request :get "/v1/phonebook"))]
      (:status response) => 200
      (:body response) => (pr-str "" )))   

    ))

(facts "PUT tests"
    (with-state-changes [(before :contents (do (reset! phonebook-db {:db {"" {:firstname "Paul" :surname "Marris"}}})))]
     (fact "update a valid user"
       (let [response (app (mock/request :put "/v1/phonebook/80a8ea00-6072-11e5-960a-d35f77d80ceb"
                           (pr-str {:firstname "Fred" :surname "Fred"}))) ]
         (:status response) => 200))
      ;; (fact "check update user"
      ;;  (let [response (app (mock/request :get "/v1/phonebook/"))]
      ;;    (:status response) => 200
      ;;    (edn/read-string (:body response)) => (pr-str {:firstname "Fred" :surname "Fred"})))

))

(facts "search test"
  (with-state-changes [(before :contents (do (reset! phonebook-db phonebook)))]
    (fact "search for existing user"
      (let [responce (app (mock/request :get "/v1/phonebook/search?lastname=marris"))]
         
   ))))
